---
###############################################################################
# Process Mailserver Configuration
###############################################################################
# Use host, group, role vars and set final configuration options to use.
#
# Configuration should be done in the subrole/tasks, unless that information
# must be shared with other tasks (such as postfix).
#
# Args:
#   mail_postmaster_address: string postmaster email, empty to auto-determine.
#   mail_report_recipient: string email, empty to set to postmaster.
#   mail_domains: list of strings, domains to host, first domain primary.
#   mail_mx_record: string MX record to use (mail).
#   mail_trusted_networks: list of strings, trusted networks for mail delivery.
#   mail_users: list of dict, mail user accounts.
#     {
#       user: '{USER}@{DOMAIN}',
#       pass: '{HASH OR PASS}',
#       uid: '{OPTIONAL}',
#       gid: '{OPTIONAL},
#       gecos: '{OPTIONAL}',
#       home: '{OPTIONAL}',
#       shell: '{OPTIONAL}',
#       extra: '{OPTIONAL}'
#     }
#   mail_log_level: string log level to use. One of: critical, error, warn,
#       info, debug, trace.
#
# Generates:
#   __primary_domain: string naked primary domain (example.com).
#   __private_ip: string internal network routable ip (192.168.0.1).
#   __resolv_nameservers: string host dns servers 1.1.1.1,8.8.8.8.
#   __catch_all_defined: string 'true' if domain catchalls defined. Use |bool
#       for evaluation.
#   __abuse_defined: string 'true' if abuse@ defined. Use |bool for evaluation.
#   __postmaster_defined: string 'true' if domain catchalls defined. Use |bool
#       for evaluation.
#   __trusted_networks: list of trusted networks, localhosts first. May be ip,
#       cidr,hostname,wildcard addresses.
#   __report_recipient: string email to sending mail reporting to.
#   __public_ip: string current public ip.
#   __mail_mx_fqdn: string primary domain FQDN MX record (mail.example.com).
#   __log_map: dict mapping logging names to integers.
#   __log_int: integer translation of user requested logging level (using map).
#   __fullchain_pem: string location of fullchain.pem certificate.
#   __privkey_pem: string location of privkey.pem certificate.
#   __tls_high_cipherlist: string colon (:) separated list of ciphers to use
#       for postfix TLS and dovecot TLS. Always validate ciphers on role
#       updates and remove insecure versions. See tls_high_cipherlist for
#       postfix, tls.main.yml, local.dovecot.conf.yml.
#   __vmail_uid: integer vmail user ID. Generated in install.yml.
#   __vmail_gid: integer vmail group ID. Generated in install.yml.
#   __first_run: boolean true if this is the first time the role has been run
#       on the system.
#   __mail_etc_hosts: string /etc/hosts line for local DNS resolution. see
#       postsfix/local_aliases.yml for details.
#
# Reference:
# * http://www.postfix.org/postconf.5.html#tls_high_cipherlist
# * https://tribut.de/blog/secure-your-services-using-sane-cipher-ordering
# * https://www.howtoforge.com/tutorial/how-to-protect-your-debian-and-ubuntu-server-against-the-logjam-attack/

- name: 'config | determine external IP' # noqa command-instead-of-module query directly instead of using community.general.ipify_facts
  ansible.builtin.command: 'curl ifconfig.me'
  register: _mail_config_external_ip
  changed_when: false

- name: 'config | process user options'
  ansible.builtin.set_fact:
    __primary_domain:     '{% if mail_domains|length > 0 %}{{ mail_domains[0] }}{% else %}{{ ansible_domain }}{% endif %}'
    __private_ip:         '{{ ansible_default_ipv4.address|default(ansible_all_ipv4_addresses[0]) }}'
    __resolv_nameservers: '{{ ansible_dns.nameservers|join(",") }}'
    __catch_all_defined:  '{% for alias in mail_aliases if alias.map.startswith("@")%}true{% endfor %}'  # string 'true' or ''
    __abuse_defined:      '{% for alias in mail_aliases if alias.map.startswith("abuse@")%}true{% endfor %}'  # string 'true' or ''
    __postmaster_defined: '{% for alias in mail_aliases if alias.map.startswith("postmaster@")%}true{% endfor %}'  # string 'true' or ''
    __trusted_networks:   '{{ ["127.0.0.1", "localhost", "127.0.0.0/8"] + mail_trusted_networks }}'
    __report_recipient:   '{% if mail_report_recipient|length > 0 %}{{ mail_report_recipient }}{% else %}postmaster@{{ mail_users[0].user.split("@")[1] }}{% endif %}'
    __public_ip:          '{{ _mail_config_external_ip.stdout }}'
    __log_map:            '{{ {"critical": 0, "error": 1, "warn": 2, "info": 3, "debug": 4, "trace": 5} }}'
    __fullchain_pem:      '{{ mail_certs|regex_replace("\\/$", "") }}/fullchain.pem'
    __privkey_pem:        '{{ mail_certs|regex_replace("\\/$", "") }}/privkey.pem'
    # TODO(security): Always validate the latest ciphers during role updates.
    __tls_high_cipherlist:    'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256'
    __mail_validation_checks: true # developer option; false disables all validation checks.

- name: 'config | process compound user options'
  ansible.builtin.set_fact:
    __mail_mx_fqdn: '{{ mail_mx_record }}.{{ __primary_domain }}'
    __log_int:      '{{ __log_map[mail_log_level] }}'

- name: 'config | generate local DNS resolution configuration'
  ansible.builtin.set_fact:
    __mail_etc_hosts: '{{ __private_ip }} {{ ansible_fqdn }} {{ ansible_hostname }} {{ __mail_mx_fqdn }} {{ mail_mx_record }}'

- name: 'config | using snakeoil certificates'
  ansible.builtin.set_fact:
    __fullchain_pem: '/etc/ssl/certs/ssl-cert-snakeoil.pem'
    __privkey_pem:   '/etc/ssl/private/ssl-cert-snakeoil.key'
  when: mail_certs == '/etc/ssl/certs/ssl-cert-snakeoil.pem'

- name: 'config | confirm {{ __fullchain_pem }} is valid and readable'
  ansible.builtin.command: 'ssl-cert-check -c {{ __fullchain_pem }}'
  register: _mail_config_fullchain
  changed_when: false
  failed_when: '"Expired" in _mail_config_fullchain.stdout'

- name: 'config | no DKIM settings specified, generating defaults'
  ansible.builtin.include_tasks: generate_dkim_domains.yml
  when: mail_dkim_domains|length == 0

# Private SSL keys typically do not have expiration (snakeoil, let's encrypt).
- name: 'config | confirm {{ __privkey_pem }} is readable'
  ansible.builtin.stat:
    path: '{{ __privkey_pem }}'
  register: _mail_config_privkey
  failed_when: not _mail_config_privkey.stat.readable

# High confidence of first time mail run if hosts is not setup correctly.
- name: 'config | determine run status'
  ansible.builtin.command: 'grep -x "{{ __mail_etc_hosts }}" /etc/hosts'
  register: _mail_config_first_run
  changed_when: false
  failed_when: false

- name: 'config | set run status'
  ansible.builtin.set_fact:
    __first_run: '{% if mail_purge_install or _mail_config_first_run.rc > 0 %}true{% else %}false{% endif %}'

- name: 'config | detected settings'
  ansible.builtin.debug:
    msg: |
      Host
      ----
      Local IP:                   {{ __private_ip }}
      External (public) IP:       {{ __public_ip }}
      DNS nameservers:            {{ __resolv_nameservers }}
      SSL fullchain:              {{ __fullchain_pem }}
      SSL private key:            {{ __privkey_pem }}
      Certificates:               {% if 'ssl-cert-snakeoil' in __fullchain_pem %}FAKE certificates in use, use Let's Encrypt. Do not use LIVE.{% else %}OK{% endif %}

      Detected core count:        {{ ansible_processor_nproc }}
      Log level:                  {{ mail_log_level }}({{ __log_int }})
      Confirmation prompt:        {{ mail_confirmation_prompt }}
      Purge enabled:              {{ mail_purge_install }}{% if mail_purge_install %} - some tasks may take a long time to complete.{% endif %}

      First run:                  {{ __first_run }}

      Mail
      ----
      Primary domain:             {{ __primary_domain }}
      Domains:                    {{ mail_domains|join(', ') }}
      Mail MX record:             {{ mail_mx_record }}
      Primary user:               {{ mail_users[0].user }}
      Domain catch-all defined:   {{ __catch_all_defined|bool }}
      Domain abuse@ defined:      {{ __abuse_defined|bool }}
      Domain postmaster@ defined: {{ __postmaster_defined|bool }}
      Trusted networks:           {{ __trusted_networks|join(', ') }}
      Report recipient:           {{ __report_recipient }}

- name: 'config | pause until manually confirmed'
  ansible.builtin.pause:
    echo: false
  when: mail_confirmation_prompt
